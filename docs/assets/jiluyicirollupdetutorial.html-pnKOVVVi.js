import{_ as n,o as s,c as a,e}from"./app-BlhvexKe.js";const l={},i=e(`<p>rollup真的是非常重要的技能了。 ![[Pasted image 20240830171530.png]] 光看官网的介绍的意思就是把很多小的js编译成一个大的。 如果我们写代码，那肯定是分成很多模块这样方便管理，但是打包的话，就是要把很多小块合成一个大块。</p><p>把rollup命令全局添加进来</p><p>我喜欢用pnpm</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pnpm add -g rollup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个项目 rollup-start 进入项目 创建两个文件 main.js foo.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// src/main.js </span>
<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">;</span> 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// src/foo.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下去使用rollup来进行打包</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#  cli执行 输出到控制台</span>
rollup src/main.js <span class="token parameter variable">-f</span> cjs

<span class="token comment"># 输出到文件 用cjs的规范</span>
rollup src/main.js <span class="token parameter variable">-o</span> bundle.js <span class="token parameter variable">-f</span> cjs

<span class="token comment"># src/main.js → bundle.js...</span>
created bundle.js <span class="token keyword">in</span> 24ms

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，起步指导说是要运行一段nodejs以后去直接执行js才能看到输出hello work 因为之前的代码里面并没有直接console log 所以加一段console log来直接node bundle.js 来看到结果 修改main.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">;</span>  
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新cli build</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>rollup src/main.js <span class="token parameter variable">-o</span> bundle.js <span class="token parameter variable">-f</span> cjs

<span class="token comment"># 运行代码</span>
<span class="token function">node</span> ./bundle.js
<span class="token comment"># 输出hello world</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端的工具都光cli然后还有大量配置的话肯定是非常不方便的， 所以需要配置文件</p><h3 id="using-config-files" tabindex="-1"><a class="header-anchor" href="#using-config-files"><span>Using Config Files</span></a></h3><p>使用rollup 配置文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// rollup.config.mjs</span>
<span class="token comment">// 根目录下创建的配置文件，不是在src下面</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 入口</span>
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 出口</span>
		<span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>  <span class="token comment">// 打包规范</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写了一个配置文件以后 使用新的打包cli</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>rollup <span class="token parameter variable">-c</span>

<span class="token comment"># 打包成功，和前面一样，所以打包之前可以删除bundle.js 来观察效果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![[Pasted image 20240830173314.png]] 这个时候教程提示我们可以试试多环境的打包方式 其实就是使用rollup --config这个cli参数来指定其他的打包文件。</p><h3 id="installing-rollup-locally" tabindex="-1"><a class="header-anchor" href="#installing-rollup-locally"><span>Installing Rollup locally</span></a></h3><p>在项目内配置rollup 假设我们要写一个前端的库，打包很多js到一个js，那么这个库的源代码里肯定是引用了rollup</p><p>那么我们在刚刚的那个项目的根目录执行 pnpm init pnpm add rollup -S -D</p><p>![[Pasted image 20240830173716.png]]</p><p>安装完成以后是这样，我们加一个script进去,同时删除script自带的test，没啥用。</p><p>配置到这里以后可以愉快的使用pnpm run build 这种熟悉的方式来进行打包了！！！快乐来了。</p>`,26),t=[i];function p(o,c){return s(),a("div",null,t)}const d=n(l,[["render",p],["__file","jiluyicirollupdetutorial.html.vue"]]),u=JSON.parse('{"path":"/blogs/FrontEnd/Rollup/jiluyicirollupdetutorial.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Using Config Files","slug":"using-config-files","link":"#using-config-files","children":[]},{"level":3,"title":"Installing Rollup locally","slug":"installing-rollup-locally","link":"#installing-rollup-locally","children":[]}],"git":{"createdTime":1725012052000,"updatedTime":1725012052000,"contributors":[{"name":"abra","email":"github","commits":1}]},"filePathRelative":"blogs/FrontEnd/Rollup/记录一次rollup的tutorial.md"}');export{d as comp,u as data};

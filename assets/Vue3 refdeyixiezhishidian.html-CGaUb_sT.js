import{_ as n,c as s,o as a,e}from"./app-CgYSsB6L.js";const p={},t=e(`<p>vue会检测ref的更新并且去更新Dom，但是这个不是同步发生的，可以在数据变更中调用nextTick() 等dom刷新以后再进行其他操作。 ref的更新和dom的更新是异步的。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> nextTick <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  count<span class="token punctuation">.</span>value<span class="token operator">++</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// Now the DOM is updated</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ref可以检测到一些深度嵌套的对象以及js的数组和map。</p><h3 id="怎么把一个ref对象变成普通js对象" tabindex="-1"><a class="header-anchor" href="#怎么把一个ref对象变成普通js对象"><span>怎么把一个ref对象变成普通js对象</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> personRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>  </span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;personRef=======&#39;</span><span class="token punctuation">,</span> personRef<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">const</span> personUnRef <span class="token operator">=</span> <span class="token function">unref</span><span class="token punctuation">(</span>personRef<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;personUnRef==============&#39;</span><span class="token punctuation">,</span> personUnRef<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">const</span> personObj <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>personUnRef<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;personObj==============&#39;</span><span class="token punctuation">,</span> personObj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个ref对象，先unref得到一个proxy对象，再toRaw得到原始js对象。</p>`,6),o=[t];function c(i,l){return a(),s("div",null,o)}const u=n(p,[["render",c],["__file","Vue3 refdeyixiezhishidian.html.vue"]]),d=JSON.parse('{"path":"/blogs/FrontEnd/Vue/Vue3/Vue3 refdeyixiezhishidian.html","title":"Vue3 ref的一些使用","lang":"en-US","frontmatter":{"title":"Vue3 ref的一些使用"},"headers":[{"level":3,"title":"怎么把一个ref对象变成普通js对象","slug":"怎么把一个ref对象变成普通js对象","link":"#怎么把一个ref对象变成普通js对象","children":[]}],"git":{"createdTime":1724390039000,"updatedTime":1734342707000,"contributors":[{"name":"abra","email":"git","commits":1},{"name":"abra","email":"github","commits":1}]},"filePathRelative":"blogs/FrontEnd/Vue/Vue3/Vue3 ref的一些知识点.md"}');export{u as comp,d as data};
